{"version":3,"sources":["features/fretboard/Fret.js","features/fretboard/String.js","features/fretboard/Legend.js","features/fretboard/Fretboard.js","features/controls/controlSlice.js","features/controls/ControlPanel.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["Fret","props","notes","useSelector","state","controls","isSelected","children","defaultColour","overrideColour","style","backgroundColor","height","width","border","color","fontWeight","display","justifyContent","alignItems","noteOrderFlats","noteOrderSharps","String","noteOrder","useFlats","index","indexOf","startingNote","frets","i","push","length","Legend","Fretboard","strings","tuning","split","reverse","map","note","flats","colour","A","B","C","D","E","F","G","sharps","COLOUR_POOL","controlSlice","createSlice","name","initialState","currColourIndex","reducers","toggleNote","action","payload","toUpperCase","newState","newColour","newColourIndex","toggleUseFlats","notesToUse","updateTuning","actions","Paragraph","Typography","Option","Select","tunings","Standard","C6","DADGAD","ControlPanel","dispatch","useDispatch","noteButtons","Object","keys","span","textAlign","value","onClick","e","dispatchToggleNote","checked","defaultValue","onChange","level","checkedChildren","unCheckedChildren","Title","Header","Layout","Sider","Footer","Content","App","className","configureStore","reducer","controlReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.dea2ab89.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nexport function Fret(props) {\r\n  const { notes } = useSelector((state) => state.controls);\r\n  const isSelected = notes[props.children] ? notes[props.children][\"state\"] : false;\r\n  const defaultColour = props.overrideColour ? props.overrideColour : \"#f6ffed\";\r\n  const borderColour = \"#d9f7be\";\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        backgroundColor: isSelected ? notes[props.children][\"colour\"] : defaultColour,\r\n        height: \"50px\",\r\n        width: props.width,\r\n        border: `1px ${borderColour} solid`,\r\n        color: isSelected || props.overrideColour != null ? \"white\" : \"black\",\r\n        fontWeight: \"bold\",\r\n        display: \"flex\",\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\",\r\n      }}\r\n    >\r\n      {props.children}\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { Fret } from \"./Fret\";\r\n\r\nconst NUM_FRETS = 21;\r\nconst BASE_FRET_WIDTH = 60;\r\n\r\n// TODO: refactor this out somewhere else\r\nconst noteOrderFlats = [\r\n  \"A♭\",\r\n  \"A\",\r\n  \"B♭\",\r\n  \"B\",\r\n  \"C\",\r\n  \"D♭\",\r\n  \"D\",\r\n  \"E♭\",\r\n  \"E\",\r\n  \"F\",\r\n  \"G♭\",\r\n  \"G\",\r\n];\r\n\r\nconst noteOrderSharps = [\r\n  \"A\",\r\n  \"A♯\",\r\n  \"B\",\r\n  \"C\",\r\n  \"C♯\",\r\n  \"D\",\r\n  \"D♯\",\r\n  \"E\",\r\n  \"F\",\r\n  \"F♯\",\r\n  \"G\",\r\n  \"G♯\",\r\n];\r\n\r\nexport function String(props) {\r\n  const { useFlats } = useSelector((state) => state.controls);\r\n  let noteOrder = useFlats ? noteOrderFlats : noteOrderSharps;\r\n  let index = noteOrder.indexOf(props.startingNote);\r\n  let frets = [];\r\n\r\n  for (let i = 0; i <= NUM_FRETS; i++) {\r\n    if (i == 0) {\r\n      frets.push(\r\n        <Fret overrideColour=\"#262626\" width={`${BASE_FRET_WIDTH - i}px`}>\r\n          {noteOrder[index]}\r\n        </Fret>\r\n      );\r\n    } else {\r\n      frets.push(\r\n        <Fret width={`${BASE_FRET_WIDTH - i}px`}>{noteOrder[index]}</Fret>\r\n      );\r\n    }\r\n\r\n    if (index === noteOrder.length - 1) {\r\n      index = 0;\r\n    } else {\r\n      index++;\r\n    }\r\n  }\r\n\r\n  return <div style={{ display: \"flex\" }}>{frets}</div>;\r\n}\r\n","import React from \"react\";\r\nimport { Fret } from \"./Fret\";\r\n\r\n\r\nexport function Legend(props) {\r\n  // Could render in a loop, but I _think_ this might be more efficient for re-rendering\r\n  // Hopefully, this should never need to be changed......\r\n  return (\r\n    <div style={{ display: \"flex\" }}>\r\n      <Fret overrideColour=\"#262626\" width={\"60px\"}></Fret>\r\n      <Fret overrideColour=\"#262626\" width={\"59px\"}></Fret>\r\n      <Fret overrideColour=\"#262626\" width={\"58px\"}></Fret>\r\n      <Fret overrideColour=\"#262626\" width={\"57px\"}>III</Fret>\r\n      <Fret overrideColour=\"#262626\" width={\"56px\"}></Fret>\r\n      <Fret overrideColour=\"#262626\" width={\"55px\"}>V</Fret>\r\n      <Fret overrideColour=\"#262626\" width={\"54px\"}></Fret>\r\n      <Fret overrideColour=\"#262626\" width={\"53px\"}>VII</Fret>\r\n      <Fret overrideColour=\"#262626\" width={\"52px\"}></Fret>\r\n      <Fret overrideColour=\"#262626\" width={\"51px\"}>IX</Fret>\r\n      <Fret overrideColour=\"#262626\" width={\"50px\"}></Fret>\r\n      <Fret overrideColour=\"#262626\" width={\"49px\"}></Fret>\r\n      <Fret overrideColour=\"#262626\" width={\"48px\"}>XII</Fret>\r\n      <Fret overrideColour=\"#262626\" width={\"47px\"}></Fret>\r\n      <Fret overrideColour=\"#262626\" width={\"46px\"}></Fret>\r\n      <Fret overrideColour=\"#262626\" width={\"45px\"}>XV</Fret>\r\n      <Fret overrideColour=\"#262626\" width={\"44px\"}></Fret>\r\n      <Fret overrideColour=\"#262626\" width={\"43px\"}>XVII</Fret>\r\n      <Fret overrideColour=\"#262626\" width={\"42px\"}></Fret>\r\n      <Fret overrideColour=\"#262626\" width={\"41px\"}>XIX</Fret>\r\n      <Fret overrideColour=\"#262626\" width={\"40px\"}></Fret>\r\n      <Fret overrideColour=\"#262626\" width={\"39px\"}>XXI</Fret>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { String } from \"./String\";\r\nimport { Legend } from \"./Legend\";\r\n\r\nexport function Fretboard(props) {\r\n  const tuning = props.tuning || \"E,A,D,G,B,E\";\r\n\r\n  const strings = tuning\r\n    .split(\",\")\r\n    .reverse() // since tunings are listed top-to-bottom, but we need to display bottom to top\r\n    .map((note) => <String startingNote={note} />);\r\n  return (\r\n    <div>\r\n      <Legend />\r\n      {strings}\r\n      <Legend />\r\n    </div>\r\n  );\r\n}\r\n","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst flats = {\r\n  \"A♭\": {\r\n    state: false,\r\n    colour: \"\",\r\n  },\r\n  A: {\r\n    state: false,\r\n    colour: \"\",\r\n  },\r\n  \"B♭\": {\r\n    state: false,\r\n    colour: \"\",\r\n  },\r\n  B: {\r\n    state: false,\r\n    colour: \"\",\r\n  },\r\n  C: {\r\n    state: false,\r\n    colour: \"\",\r\n  },\r\n  \"D♭\": {\r\n    state: false,\r\n    colour: \"\",\r\n  },\r\n  D: {\r\n    state: false,\r\n    colour: \"\",\r\n  },\r\n  \"E♭\": {\r\n    state: false,\r\n    colour: \"\",\r\n  },\r\n  E: {\r\n    state: false,\r\n    colour: \"\",\r\n  },\r\n  F: {\r\n    state: false,\r\n    colour: \"\",\r\n  },\r\n  \"G♭\": {\r\n    state: false,\r\n    colour: \"\",\r\n  },\r\n  G: {\r\n    state: false,\r\n    colour: \"\",\r\n  },\r\n};\r\n\r\nconst sharps = {\r\n  A: {\r\n    state: false,\r\n    colour: \"\",\r\n  },\r\n  \"A♯\": {\r\n    state: false,\r\n    colour: \"\",\r\n  },\r\n  B: {\r\n    state: false,\r\n    colour: \"\",\r\n  },\r\n  C: {\r\n    state: false,\r\n    colour: \"\",\r\n  },\r\n  \"C♯\": {\r\n    state: false,\r\n    colour: \"\",\r\n  },\r\n  D: {\r\n    state: false,\r\n    colour: \"\",\r\n  },\r\n  \"D♯\": {\r\n    state: false,\r\n    colour: \"\",\r\n  },\r\n  E: {\r\n    state: false,\r\n    colour: \"\",\r\n  },\r\n  F: {\r\n    state: false,\r\n    colour: \"\",\r\n  },\r\n  \"F♯\": {\r\n    state: false,\r\n    colour: \"\",\r\n  },\r\n  G: {\r\n    state: false,\r\n    colour: \"\",\r\n  },\r\n  \"G♯\": {\r\n    state: false,\r\n    colour: \"\",\r\n  },\r\n};\r\n\r\nconst RED = \"#f5222d\";\r\nconst VOLCANO = \"#fa541c\";\r\nconst LIGHT_ORANGE = \"#ffc069\";\r\nconst GOLD = \"#faad14\";\r\nconst YELLOW = \"#fadb14\";\r\nconst LIME = \"#a0d911\";\r\nconst DARK_GREEN = \"#135200\";\r\nconst CYAN = \"#13c2c2\";\r\nconst LIGHT_BLUE = \"#91d5ff\";\r\nconst ELECTRIC_BLUE = \"#1d39c4\";\r\nconst PURPLE = \"#722ed1\";\r\nconst MAGENTA = \"#eb2f96\";\r\n\r\nconst COLOUR_POOL = [RED, ELECTRIC_BLUE, LIME, VOLCANO, PURPLE, DARK_GREEN, LIGHT_ORANGE, CYAN, GOLD, MAGENTA, YELLOW, LIGHT_BLUE];\r\n\r\nexport const controlSlice = createSlice({\r\n  name: \"controls\",\r\n  initialState: {\r\n    useFlats: false,\r\n    currColourIndex: 0,\r\n    tuning: \"E,A,D,G,B,E\",\r\n    notes: {\r\n      ...sharps,\r\n    },\r\n  },\r\n\r\n  reducers: {\r\n    toggleNote: (state, action) => {\r\n      const note = action.payload.toUpperCase();\r\n\r\n      const newState = !state[\"notes\"][note][\"state\"];\r\n      const newColour = newState ? COLOUR_POOL[state.currColourIndex] : \"\";\r\n      const newColourIndex = newState ? state.currColourIndex + 1 : state.currColourIndex - 1;\r\n\r\n      return {\r\n        ...state,\r\n        currColourIndex: newColourIndex,\r\n        notes: {\r\n          ...state.notes,\r\n          [note]: {\r\n              state: newState,\r\n              colour: newColour,\r\n          }\r\n        },\r\n      };\r\n    },\r\n\r\n    toggleUseFlats: (state) => {\r\n      const useFlats = !state.useFlats;\r\n      let notesToUse = useFlats ? flats : sharps;\r\n\r\n      // TODO: map between flats and sharps so user doesn't have to re-select notes\r\n\r\n      return {\r\n        ...state,\r\n        currColourIndex: 0,\r\n        useFlats,\r\n        notes: {\r\n          ...notesToUse,\r\n        },\r\n      };\r\n    },\r\n\r\n    updateTuning: (state, action) => {\r\n      return {\r\n        ...state,\r\n        tuning: action.payload\r\n      }\r\n    }\r\n  },\r\n});\r\n\r\nexport const { toggleNote, toggleUseFlats, updateTuning } = controlSlice.actions;\r\n\r\nexport default controlSlice.reducer;\r\n","import React from \"react\";\r\nimport { Typography, Checkbox, Row, Col, Switch, Select, Divider } from \"antd\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\n\r\nimport { toggleNote, toggleUseFlats, updateTuning } from \"./controlSlice\";\r\n\r\nconst { Paragraph } = Typography;\r\nconst { Option } = Select;\r\n\r\nconst tunings = {\r\n  Standard: \"E,A,D,G,B,E\",\r\n  \"Open G\": \"D,G,D,G,B,D\",\r\n  \"Open D\": \"D,A,D,F♯,A,D\",\r\n  C6: \"C,A,C,G,C,E\",\r\n  DADGAD: \"D,A,D,G,A,D\",\r\n};\r\n\r\nexport function ControlPanel() {\r\n  const dispatch = useDispatch();\r\n\r\n  const { useFlats, notes } = useSelector((state) => state.controls);\r\n\r\n  const dispatchToggleNote = (note) => {\r\n    dispatch(toggleNote(note));\r\n  };\r\n\r\n  const noteButtons = Object.keys(notes).map((note) => {\r\n    return (\r\n      <Row>\r\n        <Col span={24} style={{ textAlign: \"left\" }}>\r\n          <Checkbox\r\n            style={{ color: \"white\" }}\r\n            value={note}\r\n            onClick={(e) => dispatchToggleNote(note)}\r\n            checked={notes[note][\"state\"]}\r\n          >\r\n            {note}\r\n          </Checkbox>\r\n        </Col>\r\n      </Row>\r\n    );\r\n  });\r\n\r\n  return (\r\n    <div>\r\n      <Row>\r\n        <Col span={24} style={{ textAlign: \"left\" }}>\r\n          <Paragraph style={{ color: \"white\" }}>Tuning:</Paragraph>\r\n        </Col>\r\n        <Col span={24}>\r\n          <Select\r\n            defaultValue=\"Standard\"\r\n            style={{ width: \"100%\" }}\r\n            onChange={(tuning) => dispatch(updateTuning(tunings[tuning]))}\r\n          >\r\n            {Object.keys(tunings).map((tuning) => (\r\n              <Option value={tuning}>{tuning}</Option>\r\n            ))}\r\n          </Select>\r\n        </Col>\r\n      </Row>\r\n      <Divider style={{ color: \" white\" }} />\r\n      <Row>\r\n        <Col span={16} style={{ textAlign: \"left\" }}>\r\n          <Paragraph level={3} style={{ color: \"white\" }}>\r\n            Show Flats\r\n          </Paragraph>\r\n        </Col>\r\n        <Col span={8}>\r\n          <Switch\r\n            checkedChildren=\"♭\"\r\n            unCheckedChildren=\"♯\"\r\n            checked={useFlats}\r\n            onClick={(e) => dispatch(toggleUseFlats())}\r\n          />\r\n        </Col>\r\n      </Row>\r\n      <Divider />\r\n      {noteButtons}\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { Fretboard } from './features/fretboard/Fretboard';\r\nimport { ControlPanel } from './features/controls/ControlPanel';\r\nimport { useSelector } from \"react-redux\";\r\nimport './App.css';\r\n\r\nimport { Typography } from 'antd';\r\nimport { Layout } from 'antd';\r\n\r\nconst { Title } = Typography;\r\nconst { Header, Footer, Sider, Content } = Layout;\r\n\r\nfunction App() {\r\n  const { tuning } = useSelector((state) => state.controls);\r\n  return (\r\n    <div className=\"App\">\r\n      <Layout>\r\n        <Header>\r\n          <Title level={1} style={{ color: \"white\" }}>GUITAR MAP</Title>\r\n        </Header>\r\n        <Layout>\r\n          <Sider>\r\n            <ControlPanel />\r\n          </Sider>\r\n          <Content>\r\n            <Fretboard tuning={tuning || \"E,A,D,G,B,E\"}/>\r\n          </Content>\r\n        </Layout>\r\n      </Layout>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport controlReducer from \"../features/controls/controlSlice\";\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    controls: controlReducer,\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}